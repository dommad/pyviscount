# config.toml

[partition.general]

# can be fasta or sptxt
search_space_path = ./example.fasta


partition_mode = Peptide            # possible values: Protein, Peptide

# number of partitions to generate from 
# the original search space
num_partitions = 2

# number of max. missed cleavages for 
# peptide level partition mode
num_missed_cleavages = 0

output_path = ./new_protein_yeast


[plotting]

plot_format = png
output_path = ./testing_
dpi = 600



[validation.general]

partition_mode = postsearch         # possible values: postsearch, presearch

# possible values:
# TDC (decoy counting based on target-decoy competition),
# STD (separate target-decoy search),
# DecoyFree (PyLord, CDD, Coute),
validation_mode = TDC    # possible values: DecoyFree, TDC, STD, Entrapment

# if decoy method is used, the method of FDR estimation needs to be specified
decoy_mode = Counting               # possible values: Counting, P-value          


# Correct spectrum-level p-values output by the search engine
# available for Tide and SpectraST
# it can also be applied to p-values provided as postprocessor scores;
# then, sidak_p_value_name parameter should be set to the postprocessor score name
# possible values: true, false
sidak_correction = false             # possible values: true, false
sidak_p_value_name = p_value        # possible values: p_value (automatically provided for Tide and Spectrast) or user-defined postprocessor score name


# search engine; accepted input formats: txt, pep.xml, mzid
engine = Tide                  # possible values: Comet, Tide, SpectraST, MSGF


# FDR and threshold scores
# for Tide: refactored_xcorr, tev
# for Comet: xcorr, tev
# for Spectrast: dot_product, fval, tev
# for MSFragger: tev, hyperscore
# for MSGF+: tev, msgf_raw_score, msgf_denovo_score, msgf_spec_e_value
# for presearch mode, it is possible to provide input as peptideprophet or iprophet files, then
# another scores are peptideprophet_probability and iprophet_probability
# if postprocessor file is provided, then user-defined postprocessor score name can be used as well

fdr_score = tev

threshold_score = tev

subset_id = 0
num_thresholds = 50

# if working on target-decoy competition data,
# provide the ratio of decoy database to target database size,
# e.g., if both are equal size, the ratio is 1, 
# if decoy db was twice larger, the ratio is 2
decoy_target_ratio = 1


# level of FDR calculation - PSM (value: PSM) or peptide level (value: Peptide)
fdr_level = Peptide



[validation.postprocessor_score.percolator]

# if you want to enable selection of percolator score for quality threshold
# or fdr calculation, set it to 'true', otherwise 'false'
add_score = false
score_name = percolator_score
# specify the path to corresponding Percolator results (tsv)
file_path = /Users/dmadej/Documents/partipy/examples/hamster_percolator.tsv


[validation.postprocessor_score.pylord]
add_score = false
score_name = PyLord_p_value
file_path = /Users/dmadej/Documents/pylord/hamster/LowerOrder_mu_beta_params.txt


[validation.postprocessor_score.cdd]
add_score = false
score_name = CDD_p_value
file_path = /Users/dmadej/Documents/pylord/output_results/CDD_mu_beta_params.txt



[validation.extra]

num_bootstrap = 50
tev_decoy_adjustment = 0.75
decoy_factor = 0.5
plot = true
decoy_tag = DECOY
tev_threshold = 0.5
